{"version":3,"file":"static/js/341.50c50c9f.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactItem/ContactItem.styled.jsx","components/ContactsList/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/App/App.styled.jsx","pages/ContactPage.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\n\nexport const getFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) return contacts;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  gap: 7px;\n  flex-direction: column;\n  justify-content: center;\n  padding: 20px;\n  width: 300px;\n  border: 1px solid #a5a2a2;\n  border-radius: 6px;\n`;\n\nconst Input = styled.input`\n  outline: none;\n  padding:5px;\n`;\n\nconst Button = styled.button`\n    width: 100px;\n    height: 40px;\n    font-size: 16px;\n    text-align: center;\n    color: #fff;\n    background-color: #a5a2a2;\n    box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n    border-radius: 5px;\n    border: none;\n    cursor: pointer;\n    \n    :hover,\n    :focus {\n      background-color: #918d8d;\n      }\n    \n    `\n\n    export { Form, Input, Button };","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from '../../redux/contacts/operation';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form, Input, Button } from './ContactForm.styled';\n\nconst shortid = require('shortid');\nconst inputNameId = shortid.generate();\nconst inputNumberId = shortid.generate();\nconst buttonId = shortid.generate();\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const changeName = e => {\n    setName(e.currentTarget.value);\n  };\n\n  const changeNumber = e => {\n    setNumber(e.currentTarget.value);\n  };\n\n  const isContains = contactName => {\n    return contacts.some(({ name }) => name === contactName);\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    if (isContains(name)) {\n      alert(`${name} is allready in contacts`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handelSubmit}>\n      <label htmlFor={inputNameId}>\n        <span>Name</span>\n      </label>\n      <Input\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"name\"\n        id={inputNameId}\n        value={name}\n        onChange={changeName}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label htmlFor={inputNumberId}>\n        <span>Number</span>\n      </label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        id={inputNumberId}\n        value={number}\n        onChange={changeNumber}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <label htmlFor={buttonId}>\n        <Button type=\"submit\" id={buttonId}>\n          Add contact\n        </Button>\n      </label>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nconst SectionFilter = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\n\nconst Label = styled.label`\n  margin: 5px;\n`;\nconst Input = styled.input`\n  outline: none;\n  padding: 5px;\n\n`;\n\nexport { SectionFilter, Label, Input }","import { SectionFilter, Label, Input } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const filterContact = target.value.toLowerCase();\n    dispatch(setFilter(filterContact))\n  };\n\n  return (\n    <SectionFilter>\n      <Label>Filter</Label>\n      <Input type=\"text\" onChange={handleChange} />\n    </SectionFilter>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nconst ListOfContact = styled.ul`\n list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Container = styled.div`\n  width: 300px;\n  margin: 0;\n  border: 1px solid #a5a2a2;\n  border-radius: 6px;\n  padding: 20px;\n`;\n\nexport { ListOfContact, Container };","import styled from '@emotion/styled';\n\nconst ContactItem = styled.li`\n  margin: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Button = styled.button`\n  width: 60px;\n  height: 30px;\n  font-size: 14px;\n  text-align: center;\n  color: #fff;\n  background-color: #a5a2a2;\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: #918d8d;\n  }\n`;\n\nexport { ContactItem, Button };\n","import { PropTypes } from 'prop-types';\nimport { ContactItem, Button } from './ContactItem.styled';\nimport { deleteContact } from '../../../redux/contacts/operation';\nimport { useDispatch } from 'react-redux';\n\nconst ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n  return (\n    <ContactItem>\n      <p>\n        {name}: {number}\n      </p>\n\n      <Button onClick={handleDelete} title=\"Delete contact\">\n        Delete\n      </Button>\n    </ContactItem>\n  );\n};\n\nContactListItem.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { ListOfContact, Container } from './ContactsList.styled';\nimport ContactListItem from './ContactItem/ContactItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getFilteredContacts } from 'redux/contacts/selectors';\nimport {fetchContacts} from '../../redux/contacts/operation'\n\nconst ContactsList = () => {\n  const filterContact = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\nuseEffect(() => {\n  dispatch(fetchContacts())\n}, [dispatch])\n\n  return (\n    <Container>\n      <h2>My contacts</h2>\n      <ListOfContact>\n        {filterContact.map(({ name, number, id }) => (\n          <ContactListItem name={name} number={number} id={id} key={id} />\n        ))}\n      </ListOfContact>\n    </Container>\n  );\n};\n\nexport default ContactsList;","import styled from '@emotion/styled';\n\nexport const AppStyled = styled.div`\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 40;\n  padding: 40px 80px 100px 80px;\n  color: #a5a2a2;\n  background-color: white;\n  width: 500px;\n  margin: 50px auto;\n  border: 2px dashed #a5a2a2;\n  border-radius: 4%;\n`;","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\n\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { AppStyled } from 'components/App/App.styled';\n\nexport const ContactPage = () => {\n\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    console.log('Heloo')\n    return (\n  <main>\n      <AppStyled>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <Filter />\n        {isLoading && !error && `...Loading`}\n        <ContactsList />\n      </AppStyled>\n      </main>\n    );\n  };"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","getFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","Form","styled","Input","Button","shortid","require","inputNameId","generate","inputNumberId","buttonId","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","reset","onSubmit","e","contactName","preventDefault","some","alert","addContact","htmlFor","autoComplete","type","id","value","onChange","currentTarget","pattern","title","required","SectionFilter","Label","filterContact","target","setFilter","ListOfContact","Container","ContactItem","ContactListItem","onClick","deleteContact","prototype","PropTypes","useEffect","fetchContacts","map","AppStyled","ContactPage","console","log"],"sourceRoot":""}